<Window
    x:Class="Level_Exporter.Views.MainView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:Level_Exporter.Views"
    xmlns:converters="clr-namespace:Level_Exporter"
    xmlns:res="clr-namespace:Level_Exporter.Properties"
    xmlns:resources="clr-namespace:Level_Exporter.Resources"
    xmlns:resx ="clr-namespace:Level_Exporter.Resources" 
    xmlns:viewmodels="clr-namespace:Level_Exporter.ViewModels" 
    d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel}"
    Title="{x:Static res:Resources.Title}"
    Width="800"
    Height="450"
    Background="LightGray"
    Name="MainWindow"
    x:Uid="MainWindow">

    <Window.Resources>
        <ResourceDictionary>
            <!-- Converts string name of asset to image source -->
            <converters:StringToImageSourceConverter x:Key="StringToImageSourceConverter" />

            <Style x:Key="ReadLevelsText" TargetType="{x:Type Button}">
                <Setter Property="Content" Value="{x:Static resources:WindowStrings.GetLevelsButton}"/>
            </Style>

            <!-- For centering data grid cell content -->
            <Style x:Key="ElementStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Center"/>
            </Style>
            
            <!-- For Setting Data grid Styles -->
            <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
                <Setter Property="ColumnHeaderStyle" Value="{DynamicResource DataGridHeaderStyle}"/>
                <Setter Property="RowBackground" Value="#99A4AC"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
            </Style>
            
            <!-- For styling data grid column headers -->
            <Style x:Key="DataGridHeaderStyle" TargetType="DataGridColumnHeader">
                <Setter Property="Background" Value="#324B4C"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="0,0,1,0"/>
                <Setter Property="Padding" Value="1,0,0,0"/>
                <Setter Property="Foreground" Value="#D3D3D3"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
            </Style>

            <!-- Style Trigger for hiding stl resolution text box and text block when stl is not selected CAD format -->
            <Style x:Key="FrameworkStyle" TargetType="{x:Type FrameworkElement}">
                <Setter Property="Visibility" Value="Hidden"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=CadFormatSelected.FileExtension}" Value=".stl">
                        <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Inherits from key: Framework Style to prevent duplicate code -->
            <Style x:Key="StlTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource FrameworkStyle}"/>

            <!-- Stl Text input box style --> 
            <Style x:Key="StlTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource FrameworkStyle}">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="#99A4AC" Opacity="0.95"/>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Background" Value="#99A4AC"/>
                <Setter Property="Opacity" Value="0.835"/>
                <Setter Property="BorderBrush" Value="#FF99A4AC"/>
            </Style>

            <Style x:Key="ComboBoxStyle" TargetType="ComboBox">
                <Setter Property="Background" Value="#99A4AC"/>
                <Setter Property="Opacity" Value="0.835"/>
                <Setter Property="BorderBrush" Value="#FF99A4AC"/>
            </Style>

            <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="#99A4AC" Opacity="0.90"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Width" Value="365"/>
                <Setter Property="MaxWidth" Value="365"/>
            </Style>

            <Style x:Key="AppButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Margin" Value="10" />
                <Setter Property="Width" Value="65" />
                <Setter Property="Height" Value="50" />
                <Setter Property="Background" Value="Transparent" />
            </Style>
        </ResourceDictionary>

    </Window.Resources>

    <Grid
        x:Name="MainGrid"
        x:Uid="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="35*"/>
            <RowDefinition Height="307*"/>
            <RowDefinition Height="79*"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <StackPanel Grid.Column="0" 
                    Grid.Row="0" 
                    VerticalAlignment="Bottom"
                    HorizontalAlignment="Center" 
                    Height="Auto" 
                    Width="Auto">

            <!--Button for getting Mastercam Level information -->
            <Button x:Name="GetLevelsButton" 
                    Margin="95,0,95,5"
                    Width="150"
                    Command="{Binding Path=LevelInfoViewModel.ReadMastercamLevels}" 
                    Padding="-5,2,2,2" >
                <Button.Style>
                    <Style TargetType="{x:Type Button}" 
                           BasedOn="{StaticResource ReadLevelsText}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=LevelInfoViewModel.IsSyncButton}" Value="false">
                                <Setter Property="Content" 
                                        Value="{x:Static resources:WindowStrings.GetLevelsButton}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=LevelInfoViewModel.IsSyncButton}" Value="true">
                                <Setter Property="Content" 
                                        Value="{x:Static resources:WindowStrings.SyncLevelsButton}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>

        <Grid Grid.Row="1" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Stack panel for Combobox and stl resolution input text -->
            <StackPanel x:Uid="TextBlockStackPanel"
                        Grid.Row="0" 
                        HorizontalAlignment="Center" 
                        VerticalAlignment="Center" 
                        Width="Auto" Height="Auto">

                <!-- Text block prompting cad format selection -->
                <TextBlock FontSize="12"
                           Width="Auto" MinWidth="250"
                           Text="{x:Static resx:WindowStrings.CadTypePrompt}"/>

                <!-- Combobox for Cad format selection-->
                <ComboBox IsReadOnly="True" 
                          Style="{StaticResource ComboBoxStyle}"
                          IsTextSearchEnabled="False"
                          SelectedIndex="8"
                          ItemContainerStyle="{StaticResource ComboBoxItemStyle}"
                          SelectedValue="{Binding CadFormatSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                          ItemsSource="{Binding Path=CadFormatsViewModel.CadFormats}" 
                          DisplayMemberPath="Description" />

                <!-- Text Block above STL resolution text box-->
                <TextBlock FontSize="12" 
                           Text="{x:Static resources:WindowStrings.StlResolution}" 
                           Style="{StaticResource StlTextBlockStyle}"
                           Margin="0,24,0,5"/>

                <!-- Stl Resolution input text box -->
                <TextBox MaxLength="4"
                         Style="{StaticResource StlTextBoxStyle}"
                         FontSize="12" 
                         MinWidth="45"
                         Width="Auto"
                         Text="{Binding StlResolution, UpdateSourceTrigger=LostFocus, Mode=TwoWay}" >
                    <!-- Trigger for validating stl resolution text box input -->
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewTextInput" SourceObject="{Binding ElementName=PreviewTextInputEvent}">
                            <i:InvokeCommandAction 
                                Command="{Binding PreviewTextInputCommand}" 
                                PassEventArgsToCommand="True" 
                                x:Name="Required"/>
                            <!-- x:name required for this element, visual studio will complain about not finding xaml behavior dll -->
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
            </StackPanel>

            <!-- Stack panel for Browse button and destination directory Text box -->
            <StackPanel Grid.Row="1" 
                        VerticalAlignment="Center" 
                        Width="Auto" Height="Auto" 
                        Margin="15,0,0,0">

                <!--Text block above Destination directory Text box -->
                <TextBlock Text="{x:Static resources:WindowStrings.DestinationPrompt}"
                           ToolTip="{x:Static resources:WindowStrings.BrowseTextFieldToolTip}" 
                           Margin="10,0,0,0" />

                <StackPanel Orientation="Vertical" Width="Auto">

                    <!-- Text box for destination/output directory -->
                    <TextBox IsUndoEnabled="True"
                             Style="{StaticResource TextBoxStyle}"
                             VerticalAlignment="Center" 
                             HorizontalAlignment="Left" 
                             Margin="10,0,15,0"
                             Text="{Binding Path=DestinationDirectory, UpdateSourceTrigger=LostFocus}" 
                             ToolTip="{x:Static resources:WindowStrings.BrowseTextFieldToolTip}" >
                    </TextBox>

                    <!-- Browse Button for destination directory -->
                    <Button Content="{x:Static resources:WindowStrings.BrowseButton}"
                            Command="{Binding Path=BrowseCommand}"
                            Width="125" Margin="0,5,0,0"/>
                </StackPanel>
            </StackPanel>
        </Grid>
        <!-- Stack panel for Level info grid -->
        <DockPanel DataContext="{Binding LevelInfoViewModel}" 
                    Grid.Row="1" 
                    Grid.Column="0"
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Top" 
                    Height="Auto" 
                    Width="Auto" >

            <!--Data grid for Level information -->

            <DataGrid CanUserAddRows="False"  
                      AutoGenerateColumns="False"
                      ItemsSource="{Binding Path=Levels}" 
                      HorizontalScrollBarVisibility="Auto" 
                      VerticalScrollBarVisibility="Auto"
                      Height="Auto" 
                      Width="Auto"
                      Style="{StaticResource DataGridStyle}"
                      Margin="5,0">
                <DataGrid.Columns>
                    <DataGridTemplateColumn CanUserSort="False" 
                                            Width="Auto" 
                                            CanUserResize="False">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <!--Header Check box for selecting all levels -->
                                <CheckBox IsChecked="{Binding DataContext.IsSelectAll, 
                                                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}},
                                                                UpdateSourceTrigger=PropertyChanged}"
                                          Command="{Binding DataContext.SelectAll, 
                                                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                                <!-- Since Datagrid column *header* is not part of UI logic, must use relative source to bump up and get properties of datagrid -->
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>

                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <!-- Checkbox for selecting level for export -->
                                <CheckBox IsChecked="{Binding Path=IsSelected, UpdateSourceTrigger=PropertyChanged}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTextColumn Header="#"
                                        IsReadOnly="True"
                                        MinWidth="50" 
                                        Binding="{Binding Number}" 
                                        ElementStyle="{StaticResource ElementStyle}"/>

                    <DataGridTextColumn Header="Name" 
                                        CanUserSort="False" 
                                        CanUserResize="True" 
                                        Width="*"
                                        Binding="{Binding Name}"/>

                    <DataGridTextColumn Header="Entity Count"
                                        IsReadOnly="True"
                                        CanUserSort="False" 
                                        CanUserResize="True"
                                        Width="75" 
                                        Binding="{Binding EntityCount}" 
                                        ElementStyle="{StaticResource ElementStyle}"/>
                </DataGrid.Columns>
            </DataGrid>

        </DockPanel>

        <!-- Stack panel for ok/close buttons -->
        <StackPanel x:Name="ButtonPanel"
                    x:Uid="ButtonStackPanel"
                    Grid.Row="2" 
                    Grid.Column="1"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right" 
                    VerticalAlignment="Bottom" 
                    Height="70" Width="203">

            <!-- Ok/Export Button -->
            <Button x:Name="OkButton"
                    x:Uid="OkButton"
                    Width="102"
                    Style="{StaticResource AppButtonStyle}"
                    Command="{Binding OkCommand}">
                <StackPanel HorizontalAlignment="Left">
                    <Image Height="24"
                           Width="24"
                           Source="{Binding OkResource, Converter={StaticResource StringToImageSourceConverter}}" />
                    <TextBlock FontSize="14" 
                               Text="{x:Static resources:WindowStrings.ExportButton}"/>
                </StackPanel>
            </Button>

            <!--Close button -->
            <Button x:Name="CloseButton"
                    x:Uid="CloseButton"
                    Style="{StaticResource AppButtonStyle}"
                    Command="{Binding CloseCommand}"
                    CommandParameter="{Binding ElementName=MainWindow}">
                <Button.Content>
                    <Image Height="24"
                           Width="24"
                           Source="{Binding CancelResource, Converter={StaticResource StringToImageSourceConverter}}" />
                </Button.Content>
            </Button>
        </StackPanel>

    </Grid>
</Window>
